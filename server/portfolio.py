# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10zgpQkkOQSCnHoO27LkoneCr5C3VWwiU
"""

import numpy as np
import pandas as pd
import yfinance as yf
import warnings

warnings.filterwarnings("ignore")
pd.options.display.float_format = '{:.4%}'.format

def predict(start_date, end_date, assets_list, objective,rm):
    # Date range
    start = start_date
    end = end_date

    # Tickers of assets
    assets = assets_list
    assets.sort()

    # Downloading data
    data = yf.download(assets, start = start, end = end)
    data = data.loc[:,('Adj Close', slice(None))]
    data.columns = assets

    Y = data[assets].pct_change().dropna()

    # display(Y.head())

    import riskfolio as rp

    # Building the portfolio object
    port = rp.Portfolio(returns=Y)

    # Calculating optimal portfolio

    # Select method and estimate input parameters:

    method_mu='hist' # Method to estimate expected returns based on historical data.
    method_cov='hist' # Method to estimate covariance matrix based on historical data.

    port.assets_stats(method_mu=method_mu, method_cov=method_cov, d=0.94)

    # Estimate optimal portfolio:
    model= 'Classic' 
    rm = rm # Risk measure used, this time will be variance
    obj = objective # Objective function, could be MinRisk, MaxRet, Utility or Sharpe
    hist = False # Use historical scenarios for risk measures that depend on scenarios
    rf = 0 # Risk free rate
    l = 0 # Risk aversion factor, only useful when obj is 'Utility'
    w = port.optimization(model=model, rm=rm, obj=obj, rf=rf, l=l, hist=hist).to_json()
    return w

